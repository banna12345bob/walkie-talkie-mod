plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { // Create Forge, Registrate Forge and Flywheel
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
            includeGroup("com.jozufozu.flywheel")
        }
    }
    mavenCentral()
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    modApi "dev.architectury:architectury-forge:${architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // SimpleVoiceChat dependencies
    modRuntimeOnly "maven.modrinth:simple-voice-chat:forge-${voicechat_version}"

    // Create and its dependencies
    //modImplementation("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false } // Crashes the game and IDK why
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    setArchiveClassifier "dev-shadow"
}

remapJar {
    inputFile = shadowJar.archiveFile
    dependsOn shadowJar
    setArchiveClassifier null
}

jar {
    setArchiveClassifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
